-- Purpose of query
/* 
This query was created due to data for a "fake" school being needed for a program for aspiring principals.
This combines the data for three existing schools to form the single school but scrambles some data that is sensitive.
The end result of this was to provided these aspiring principals with this data set to be able to identify subgroups of students who have glaring issues related to assessments, attendance, referrals, etc.

SIS = Student Information System
*/

-- In the SIS, some fields created are assigned a custom name. This is something that cannot be changed and are generated by the SIS
-- These custom fields hold the value as an bigint that needs to be convert to the actual display string
-- This can be done by JOINING a table called custom_field_select_options or by utilizing the fieldoptioncode or fieldoptionlabel function
-- Code will display the abbreviation and label will display the entire string (ex. Female would display as F for code and F - Female for label)
WITH fake_school_demo AS
(
	SELECT
		*
	FROM
		(
			SELECT
				s.student_id
				,se.syear
				,'Martin County Elementary School' AS school
				,gl.title AS grade
				,REPLACE(REPLACE(fieldoptionlabel(s.custom_200000000), 'F - ', ''), 'M - ', '') AS gender
				,REPLACE(REPLACE(fieldoptionlabel(s.custom_200000001), ', Non-Hispanic', ''), 'Other-', '') AS race
				,CASE WHEN fieldoptioncode(s.custom_626) IN ('LA', 'LF', 'LY') THEN 'Yes' ELSE 'No' END AS ell -- Students who are labelled with these codes are identified by the state as being English Language Learners
				,CASE WHEN (s.custom_2012197500 NOT LIKE 'L - %' AND s.custom_2012197500 IS NOT NULL) THEN 'Yes' ELSE 'No' END AS ese -- Students with Disabilities (ESE). The "L" code is Gifted and does not classify as ESE
				,ROW_NUMBER() OVER (PARTITION BY se.student_id ORDER BY se.end_date DESC) AS rn -- ROW NUMBER to identify the last enrollment record of the student
			FROM
				students s
				INNER JOIN student_enrollment se ON (se.student_id = s.student_id)
				INNER JOIN school_gradelevels gl ON (gl.id = se.grade_id)
				INNER JOIN schools sc ON (sc.id = se.school_id)
				INNER JOIN marking_periods mp ON (mp.school_id = se.school_id AND mp.syear = se.syear AND mp.short_name = 'FY') -- By restricting to the FY (Full Year) marking period, this will provide a start and end date that spans the entire school year
			WHERE
				se.syear = '2021'
				AND sc.custom_327 IN ('0051', '0101', '0291')
				AND COALESCE(se.end_date, mp.end_date) <= mp.end_date -- Only pulls students whose end date (or marking period end date if student end date is NULL) was on or before the last day of the Full Year marking period (to avoid Summer School enrollments)
		) AS z
	WHERE
		z.rn = 1 -- Only pull the most recent enrollment row number
),

-- Pulling the full day attendance for students
-- da.state_value displays either 1 or 0. 1 = Present and 0 = Absent
attendance_data AS
(
	SELECT
		da.student_id
		,SUM(da.state_value) AS present
		,COUNT(da.state_value) AS total
	FROM
		attendance_day da
		INNER JOIN fake_school_demo fs ON (fs.student_id = da.student_id AND fs.syear = da.syear)
	GROUP BY
		da.student_id
),

-- Pulling the number of unique referrals a student receives
-- DISTINCT is used due to multiple of the same referral_id being possible due to a referral resulting in multiple actions (Parent Call + Suspension for example)
discipline_data AS
(
	SELECT
		fs.student_id
		,COUNT(DISTINCT referral_id) AS referrals
	FROM
		discipline_referrals dr
		INNER JOIN fake_school_demo fs ON (fs.student_id = dr.student_id AND fs.syear = dr.syear)
	GROUP BY
		fs.student_id
),

-- Pulls the most recent administration for the student's English Language Arts assessment
-- thst.short_name is the score type. In this case, AL = Achievement Level, which would display 1 to 5 if the student has a reported score
fsa_ela AS
(
	SELECT
		z.student_id
		,z.test
		,z.administration_date
		,z.al
	FROM
		(
			SELECT
				fs.student_id
				,tht.title AS test
				,tha.administration_date
				,ths.score AS al
				,ROW_NUMBER() OVER (PARTITION BY tha.student_id ORDER BY tha.administration_date DESC) AS rn
			FROM
				fake_school_demo fs
				INNER JOIN test_history_administrations tha ON (tha.student_id = fs.student_id)
				INNER JOIN test_history_tests tht ON (tht.id = tha.test_id)
				INNER JOIN test_history_parts thp ON (thp.test_id = tht.id)
				INNER JOIN test_history_scores ths ON (ths.administration_id = tha.id AND ths.part_id = thp.id AND ths.test_id = tht.id)
				INNER JOIN test_history_score_types thst ON (thst.id = ths.score_type_id)
			WHERE
				tht.title LIKE '%FSA ELA%'
				AND thst.short_name = 'AL'
		) AS z
	WHERE
		z.rn = 1
),

-- Pulls the most recent administration for the student's Mathematics assessment
-- thst.short_name is the score type. In this case, AL = Achievement Level, which would display 1 to 5 if the student has a reported score
fsa_math AS
(
	SELECT
		z.student_id
		,z.test
		,z.administration_date
		,z.al
	FROM
		(
			SELECT
				fs.student_id
				,tht.title AS test
				,tha.administration_date
				,ths.score AS al
				,ROW_NUMBER() OVER (PARTITION BY tha.student_id ORDER BY tha.administration_date DESC) AS rn
			FROM
				fake_school_demo fs
				INNER JOIN test_history_administrations tha ON (tha.student_id = fs.student_id)
				INNER JOIN test_history_tests tht ON (tht.id = tha.test_id)
				INNER JOIN test_history_parts thp ON (thp.test_id = tht.id)
				INNER JOIN test_history_scores ths ON (ths.administration_id = tha.id AND ths.part_id = thp.id AND ths.test_id = tht.id)
				INNER JOIN test_history_score_types thst ON (thst.id = ths.score_type_id)
			WHERE
				tht.title iLIKE '%FSA MATH%'
				AND thst.short_name = 'AL'
		) AS z
	WHERE
		z.rn = 1
),

-- Benchmark is a local district assessment that is administered.
-- This data was pulled from a raw file uploaded into the SIS and compares the beginning of year assessment to the end of year assessment.
benchmark_data AS
(
	SELECT
		fs.student_id
		,bk.ia1_p1
		,bk.ia4_p1
	FROM
		benchmark_ia1_to_ia4_temp bk
		INNER JOIN fake_school_demo fs ON (fs.student_id::varchar = bk.student_id)
	
),

-- APM is another local district assessment that is administered.
-- This assessment was loaded into the SIS so it pulls from those tables.
-- Since there are many test parts to this assessment, the Math Proficiency is hard-coded to pull what is the "overall" score for the student. This value is then converted to the 1-5 scale.
apm_math AS
(
	SELECT
		z.student_id
		,z.administration_date
		,z.title AS test
		,z.test_code
		,z.prof_level
	FROM
		(
			SELECT
				fs.student_id
				,tha.administration_date
				,tht.title
				,ths.test_code
				,CASE WHEN ths.test_code = 'Inadequate' THEN 1 WHEN ths.test_code = 'Below Satisfactory' THEN 2 WHEN ths.test_code = 'Satisfactory' THEN 3 WHEN ths.test_code = 'Proficient' THEN 4 WHEN ths.test_code = 'Mastery' THEN 5 ELSE NULL END AS prof_level
				,ROW_NUMBER() OVER (PARTITION BY tha.student_id ORDER BY tha.administration_date DESC) AS rn
			FROM
				fake_school_demo fs
				JOIN test_history_administrations tha ON (tha.student_id = fs.student_id)
				JOIN test_history_tests tht ON (tht.id = tha.test_id)
				JOIN test_history_parts thp ON (thp.test_id = tht.id)
				JOIN test_history_scores ths ON (ths.administration_id = tha.id AND ths.part_id = thp.id AND ths.test_id = tht.id)
			WHERE
				tht.title LIKE 'APM%'
				AND tht.title NOT LIKE '%Summer%'
				AND thp.title = 'Math Proficiency'
		) AS z
	WHERE
		z.rn = 1
),

-- APM is another local district assessment that is administered.
-- This assessment was loaded into the SIS so it pulls from those tables.
-- Since there are many test parts to this assessment, the Reading Proficiency is hard-coded to pull what is the "overall" score for the student. This value is then converted to the 1-5 scale.
apm_ela AS
(
	SELECT
		z.student_id
		,z.administration_date
		,z.title AS test
		,z.test_code
		,z.prof_level
	FROM
		(
			SELECT
				fs.student_id
				,tha.administration_date
				,tht.title
				,ths.test_code
				,CASE WHEN ths.test_code = 'Inadequate' THEN 1 WHEN ths.test_code = 'Below Satisfactory' THEN 2 WHEN ths.test_code = 'Satisfactory' THEN 3 WHEN ths.test_code = 'Proficient' THEN 4 WHEN ths.test_code = 'Mastery' THEN 5 ELSE NULL END AS prof_level
				,ROW_NUMBER() OVER (PARTITION BY tha.student_id ORDER BY tha.administration_date DESC) AS rn
			FROM
				fake_school_demo fs
				JOIN test_history_administrations tha ON (tha.student_id = fs.student_id)
				JOIN test_history_tests tht ON (tht.id = tha.test_id)
				JOIN test_history_parts thp ON (thp.test_id = tht.id)
				JOIN test_history_scores ths ON (ths.administration_id = tha.id AND ths.part_id = thp.id AND ths.test_id = tht.id)
			WHERE
				tht.title LIKE 'APM%'
				AND tht.title NOT LIKE '%Summer%'
				AND thp.title = 'Reading Proficiency'
		) AS z
	WHERE
		z.rn = 1
),

-- i-Ready is a math assessment administered to students.
-- This pulls from a flat file uploaded to the SIS and compares the Fall Diagnostic to the Spring Diagnostic.
iready_math AS
(
	SELECT
		fs.student_id
		,ir.fall_ss
		,ir.fall_pr
		,ir.fall_rp
		,ir.spring_ss
		,ir.spring_pr
		,ir.spring_rp
	FROM
		fake_school_demo fs
		INNER JOIN iready_math_upload_temp ir ON (ir.student_id = fs.student_id::varchar)
)

-- The final output that was given to the aspiring principals to utilize as their base file for analysis
SELECT
	ROUND(((fs.student_id - 4300000000) - 200420), 0) AS "Student ID" -- Student IDs adjusted in the backend to provide privacy
	,fs.school AS "School"
	,fs.grade AS "Grade"
	,fs.gender AS "Gender"
	,fs.race AS "Race"
	,fs.ell AS "ELL"
	,fs.ese AS "ESE"
	,CASE
		WHEN (ROUND(((fs.student_id - 4300000000) - 200420), 0) % 2) = 0 THEN 'Yes'
		WHEN RIGHT(ROUND(((fs.student_id - 4300000000) - 200420), 0)::text, 1) IN ('7', '9') THEN 'Yes'
		ELSE 'No'
	END AS "FRL" -- Since Free and Reduced Lunch (FRL) data is confidential, this was scrambled to provide Yes/No based on the student's fake ID
	,da.present AS "Days Present"
	,da.total AS "Days Total"
	,ROUND((da.present / da.total) * 100, 2) AS "Attendance Rate" -- Calculate the overall attendance rate for the student
	,CASE WHEN ROUND((da.present / da.total) * 100, 2) < 90 THEN 1 WHEN ROUND((da.present / da.total) * 100, 2) IS NULL THEN NULL ELSE 0 END AS "Below 90 Percent Attendance" -- If the overall attendance is under 90%, the student is marked with a 1
	,dd.referrals AS "Referrals"
	,CASE WHEN dd.referrals IS NOT NULL THEN 1 ELSE 0 END AS "Has Referral"
	,ela.al AS "Last FSA ELA AL"
	,CASE WHEN ela.al >= 3 THEN 1 WHEN ela.al IS NULL THEN NULL ELSE 0 END AS "Passed FSA ELA" -- An Achievement Level of 3-5 is considered passing
	,apme.test AS "Last APM ELA Test Name"
	,apme.test_code AS "Last APM ELA Proficiency Level Desc"
	,apme.prof_level AS "Last APM ELA Proficiency Level"
	,bk.ia1_p1 AS "Benchmark IA1 Score"
	,bk.ia4_p1 AS "Benchmark IA4 Score"
	,(bk.ia4_p1::bigint - bk.ia1_p1::bigint) AS "Benchmark IA Growth" -- Columns from uploaded files always upload as text, so converting to bigint for subtraction is needed
	,CASE WHEN (bk.ia4_p1::bigint - bk.ia1_p1::bigint) > 0 THEN 1 WHEN (bk.ia4_p1::bigint - bk.ia1_p1::bigint) IS NULL THEN NULL ELSE 0 END AS "Made Benchmark IA Growth" -- If the End of Year is higher than the Beginning of Year, the student makes growth
	,math.al AS "Last FSA Math AL"
	,CASE WHEN math.al >= 3 THEN 1 WHEN math.al IS NULL THEN NULL ELSE 0 END AS "Passed FSA Math" -- An Achievement Level of 3-5 is considered passing
	,apmm.test AS "Last APM Math Test Name"
	,apmm.test_code AS "Last APM Math Proficiency Level Desc"
	,apmm.prof_level AS "Last APM Math Proficiency Level"
	,ir.fall_ss AS "i-Ready Math Fall SS"
	,ir.spring_ss AS "i-Ready Math Spring SS"
	,(ir.spring_ss::bigint - ir.fall_ss::bigint) AS "i-Ready Math SS Growth" -- Columns from uploaded files always upload as text, so converting to bigint for subtraction is needed
	,ir.spring_pr AS "i-Ready Math Spring Percentile"
	,ir.spring_rp AS "i-Ready Math Spring Placement"
	,CASE WHEN (ir.spring_ss::bigint - ir.fall_ss::bigint) > 0 THEN 1 WHEN (ir.spring_ss::bigint - ir.fall_ss::bigint) IS NULL THEN NULL ELSE 0 END AS "Made i-Ready Math Growth" -- If the Spring is higher than the Fall, the student makes growth
FROM
	fake_school_demo fs
	LEFT JOIN attendance_data da ON (da.student_id = fs.student_id)
	LEFT JOIN discipline_data dd ON (dd.student_id = fs.student_id)
	LEFT JOIN fsa_ela ela ON (ela.student_id = fs.student_id)
	LEFT JOIN fsa_math math ON (math.student_id = fs.student_id)
	LEFT JOIN benchmark_data bk ON (bk.student_id = fs.student_id)
	LEFT JOIN apm_math apmm ON (apmm.student_id = fs.student_id)
	LEFT JOIN apm_ela apme ON (apme.student_id = fs.student_id)
	LEFT JOIN iready_math ir ON (ir.student_id = fs.student_id)